/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{
  IGNORE_CASE = false;  STATIC = false;}
PARSER_BEGIN(ExpReg)
package expReg;

import java.util.*;
public class ExpReg{
  	ArrayList <String> nomSymb = new ArrayList<String>();
	ArrayList <String> nomVar = new ArrayList<String>();
}

PARSER_END(ExpReg)

SKIP :
{
 	" " | "\r" | "\t" 
}

TOKEN :
{
  	< Begin: "BeginERS" >
|   < CAMBIO: "\n" >
|   < End: "EndERS" > 
|   < ALPHABET: ("Alphabet")>
| 	< ER_NAMEi: (< MAY >)(< MAY >| < DIGIT >| < MIN >)* >
| 	< SYMB: (< MIN >| < DIGIT >)(< MAY >|<MIN >|< DIGIT >)* >
| 	< #DIGIT: "0" | "1" | "2"| "3" | "4" | "5" |  "6" | "7" | "8" |"9" >
|   < #MAY: ["A"-"Z"] >
|   < #MIN: ["a"-"z"] > 
}

void ExpReg():
{
}
{
	< Begin > < CAMBIO >Alphabet() < CAMBIO > ER_NAME() (ER_NAME())* < End > < EOF >
}

void Alphabet():
{
}
{
	< ALPHABET > ": {"symbol() (","symbol())*"}"
}

void symbol():
{
	Token t;
	System.out.println("ENTRO s");
}
{
	(t = < SYMB >)
	{
		nomSymb.add(t.image);
	}
}

void Var():
{
	Token t;
}
{
	(t = < ER_NAMEi >)
	{
		nomVar.add(t.image);
		System.out.println(nomVar.size());
	}
}

void ER_NAME():
{
}
{
	(Var() "=" ERi()< CAMBIO >)
}

void Revisar():
{
	Token t;
}
{
	(t = < ER_NAMEi >)|(t = < SYMB >)
	{
	  	boolean encontrado = false;
	  	int i = 0;
		while(i < nomVar.size() && !encontrado)
		{
			encontrado = nomVar.get(i).equals(t.image);
			i++;
		}
		i = 0;
		while(i < nomSymb.size() && !encontrado)
		{
			encontrado = nomSymb.get(i).equals(t.image);
			i++;
		}
		if(!encontrado)
		{
			throw new Error("no se ha encontrado la variable o simbolo " + t.image);
		}
	}
}

void ERi():
{}
{
	("@"| "$"|((Revisar()|"*"|"+"|"|")+)|"("ERi()")"("*"|"+")*)
}
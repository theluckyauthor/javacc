/* Generated By:JavaCC: Do not edit this line. Proyecto1.java */
package uniandes.teolen.parserJavaCC.parserProyecto;

import java.util.*;
import uniandes.teolen.parserJavaCC.parserProyecto.Function;

public class Proyecto1 implements Proyecto1Constants {

        ArrayList <String> varsAccepted = new ArrayList<String>();
        ArrayList <Function> funcsAccepted = new ArrayList< Function >();

  final public int proyecto() throws ParseException {
varsAccepted.add("define");
varsAccepted.add("var");
varsAccepted.add("print");
varsAccepted.add("if");
funcsAccepted.add(new Function("define"));
funcsAccepted.add(new Function("var"));
funcsAccepted.add(new Function("print"));
funcsAccepted.add(new Function("if"));
    label_1:
    while (true) {
      variables();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    label_2:
    while (true) {
      functions();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEFINE:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
    }
    sysout();
                {if (true) return 0;}
    throw new Error("Missing return statement in function");
  }

  final public void variables() throws ParseException {
    jj_consume_token(VAR);
    jj_consume_token(SPACE);
    variable();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SPACE:
      jj_consume_token(SPACE);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(EQUAL);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SPACE:
      jj_consume_token(SPACE);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    ea();
  }

  final public void variable() throws ParseException {
        Token t;
    t = jj_consume_token(VAR_NAME);
                boolean encontrado = false;
                int i = 0;
                while(i < varsAccepted.size() && !encontrado)
                {
                        encontrado = varsAccepted.get(i).equals(t.image);
                        i++;
                }
                if(encontrado)
                {
                        {if (true) throw new Error("la variable ya existe " + t.image);}
                }
                varsAccepted.add(t.image);
  }

  final public void functions() throws ParseException {
  ArrayList <String > parametros = new ArrayList<String >();
    jj_consume_token(DEFINE);
    jj_consume_token(SPACE);
    nomfunct(parametros);
    jj_consume_token(COLON);
    eacontodosparametros(parametros);
  }

  final public void nomfunct(ArrayList< String > parametro) throws ParseException {
  // Crea el nombre de la función con la lista de parámetros
   Token t;
    t = jj_consume_token(FUNC_NAME);
    jj_consume_token(LPAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PARAM_NAME:
      params(parametro);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
        params(parametro);
      }
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(RPAR);
                boolean encontrado = false;
                int i = 0;
                while(i < funcsAccepted.size() && !encontrado)
                {
                        encontrado = funcsAccepted.get(i).equals(t.image);
                        i++;
                }
                if(encontrado)
                {
                        {if (true) throw new Error("la funcion ya existe " + t.image);}
                }
                Function a = new Function(t.image);
                a.setParametros(parametro);
                funcsAccepted.add(a);
  }

  final public void params(ArrayList< String > parametro) throws ParseException {
  // método para verificar que el parámetro no esté en la lista de parámetros
        Token t;
    t = jj_consume_token(PARAM_NAME);
                {
                boolean encontrado = false;
                int i = 0;
                while(i < parametro.size() && !encontrado)
                {
                        encontrado = parametro.get(i).equals(t.image);
                        i++;
                }
                if(encontrado)
                {
                        {if (true) throw new Error("el parametro ya existe " + t.image);}
                }
                parametro.add(t.image);
        }
        // verifica que la ea que se cree despues del : use los parametros pasados por parametro

  }

  final public void sysout() throws ParseException {
    jj_consume_token(PRINT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SPACE:
      jj_consume_token(SPACE);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(LPAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SPACE:
      jj_consume_token(SPACE);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    ea();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SPACE:
      jj_consume_token(SPACE);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    jj_consume_token(RPAR);
  }

  final public void eacontodosparametros(ArrayList< String > parametrosPorUsar) throws ParseException {
        Token t;
    t = eaconalgunparametros(parametrosPorUsar);
                String s = t.image;
                boolean encontrado = true;
                int i = 0;
                while(i < parametrosPorUsar.size() && encontrado)
                {
                        encontrado = s.contains(parametrosPorUsar.get(i));
                        i++;
                }
                if(!encontrado)
                {
                        {if (true) throw new Error("No usa todos los parametros " + t.image);}
                }
  }

  final public Token eaconalgunparametros(ArrayList< String > parametrosPorUsar) throws ParseException {
        Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PARAM_NAME:
      t = validarSiParametroEsta(parametrosPorUsar);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT:
      case PLUS:
      case REST:
      case DIV:
      case MOD:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULT:
          jj_consume_token(MULT);
          break;
        case DIV:
          jj_consume_token(DIV);
          break;
        case REST:
          jj_consume_token(REST);
          break;
        case PLUS:
          jj_consume_token(PLUS);
          break;
        case MOD:
          jj_consume_token(MOD);
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        eaconalgunparametros(parametrosPorUsar);
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      break;
    case FUNC_NAME:
      validarSiFuncionEsta();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT:
      case PLUS:
      case REST:
      case DIV:
      case MOD:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULT:
          jj_consume_token(MULT);
          break;
        case DIV:
          jj_consume_token(DIV);
          break;
        case REST:
          jj_consume_token(REST);
          break;
        case PLUS:
          jj_consume_token(PLUS);
          break;
        case MOD:
          jj_consume_token(MOD);
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        eaconalgunparametros(parametrosPorUsar);
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      break;
    case NUMBER:
      jj_consume_token(NUMBER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT:
      case PLUS:
      case REST:
      case DIV:
      case MOD:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULT:
          jj_consume_token(MULT);
          break;
        case DIV:
          jj_consume_token(DIV);
          break;
        case REST:
          jj_consume_token(REST);
          break;
        case PLUS:
          jj_consume_token(PLUS);
          break;
        case MOD:
          jj_consume_token(MOD);
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        eaconalgunparametros(parametrosPorUsar);
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      break;
    case VAR_NAME:
      validarSiVariableEsta();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT:
      case PLUS:
      case REST:
      case DIV:
      case MOD:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULT:
          jj_consume_token(MULT);
          break;
        case DIV:
          jj_consume_token(DIV);
          break;
        case REST:
          jj_consume_token(REST);
          break;
        case PLUS:
          jj_consume_token(PLUS);
          break;
        case MOD:
          jj_consume_token(MOD);
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        eaconalgunparametros(parametrosPorUsar);
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      break;
    case LCOR:
      jj_consume_token(LCOR);
      eaconalgunparametros(parametrosPorUsar);
      jj_consume_token(RCOR);
      break;
    case IF:
      cond();
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token validarSiParametroEsta(ArrayList< String > parametro) throws ParseException {
        Token t = null;
    t = jj_consume_token(PARAM_NAME);
                boolean f = false;
                int i = 0;
                while(i < parametro.size() && !f)
                {
                        if(parametro.get(i).equals(t.image))
                        {
                                f = true;
                        }
                        i++;
                }
                if(!f)
                {
                        {if (true) throw new Error("el parametro no existe " + t.image);}
                }
                {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public void ea() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUNC_NAME:
      validarSiFuncionEsta();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT:
      case PLUS:
      case REST:
      case DIV:
      case MOD:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULT:
          jj_consume_token(MULT);
          break;
        case DIV:
          jj_consume_token(DIV);
          break;
        case REST:
          jj_consume_token(REST);
          break;
        case PLUS:
          jj_consume_token(PLUS);
          break;
        case MOD:
          jj_consume_token(MOD);
          break;
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        ea();
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      break;
    case NUMBER:
      jj_consume_token(NUMBER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT:
      case PLUS:
      case REST:
      case DIV:
      case MOD:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULT:
          jj_consume_token(MULT);
          break;
        case DIV:
          jj_consume_token(DIV);
          break;
        case REST:
          jj_consume_token(REST);
          break;
        case PLUS:
          jj_consume_token(PLUS);
          break;
        case MOD:
          jj_consume_token(MOD);
          break;
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        ea();
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      break;
    case VAR_NAME:
      validarSiVariableEsta();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT:
      case PLUS:
      case REST:
      case DIV:
      case MOD:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULT:
          jj_consume_token(MULT);
          break;
        case DIV:
          jj_consume_token(DIV);
          break;
        case REST:
          jj_consume_token(REST);
          break;
        case PLUS:
          jj_consume_token(PLUS);
          break;
        case MOD:
          jj_consume_token(MOD);
          break;
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        ea();
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
      break;
    case LCOR:
      jj_consume_token(LCOR);
      ea();
      jj_consume_token(RCOR);
      break;
    case IF:
      cond();
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void cond() throws ParseException {
    jj_consume_token(IF);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SPACE:
      jj_consume_token(SPACE);
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    jj_consume_token(LPAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SPACE:
      jj_consume_token(SPACE);
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    eb();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SPACE:
      jj_consume_token(SPACE);
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    jj_consume_token(COMMA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SPACE:
      jj_consume_token(SPACE);
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    ea();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SPACE:
      jj_consume_token(SPACE);
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
    jj_consume_token(COMMA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SPACE:
      jj_consume_token(SPACE);
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
    ea();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SPACE:
      jj_consume_token(SPACE);
      break;
    default:
      jj_la1[31] = jj_gen;
      ;
    }
    jj_consume_token(RPAR);
  }

  final public void eb() throws ParseException {
    ea();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case G:
      jj_consume_token(G);
      break;
    case GE:
      jj_consume_token(GE);
      break;
    case L:
      jj_consume_token(L);
      break;
    case LE:
      jj_consume_token(LE);
      break;
    case E:
      jj_consume_token(E);
      break;
    case NE:
      jj_consume_token(NE);
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    ea();
  }

  final public void validarSiFuncionEsta() throws ParseException {
        ArrayList <String > parametros = new ArrayList<String >();
        Token t;
    t = jj_consume_token(FUNC_NAME);
    jj_consume_token(LPAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PARAM_NAME:
      params(parametros);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[33] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        params(parametros);
      }
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
    jj_consume_token(RPAR);
                Function f = null;
                int i = 0;
                while(i < funcsAccepted.size() && f == null)
                {
                        if(funcsAccepted.get(i).getNombre().equals(t.image))
                        {
                                f = funcsAccepted.get(i);
                        }
                        i++;
                }
                if(f == null)
                {
                        {if (true) throw new Error("la funcion no existe " + t.image);}
                }
                if(f.getParametros().size() == parametros.size())
                {
                        {if (true) throw new Error("el numero de parametros de la funcion no coincide ");}
                }
  }

  final public void validarSiVariableEsta() throws ParseException {
        Token t;
    t = jj_consume_token(VAR_NAME);
                boolean encontrado = false;
                int i = 0;
                while(i < varsAccepted.size() && !encontrado)
                {
                        encontrado = varsAccepted.get(i).equals(t.image);
                        i++;
                }
                if(!encontrado)
                {
                        {if (true) throw new Error("la variable no existe " + t.image);}
                }
  }

  /** Generated Token Manager. */
  public Proyecto1TokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[35];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4000000,0x40000000,0x10,0x10,0x40,0x20000000,0x10,0x10,0x10,0x1f000,0x1f000,0x1f000,0x1f000,0x1f000,0x1f000,0x1f000,0x1f000,0x38000400,0x1f000,0x1f000,0x1f000,0x1f000,0x1f000,0x1f000,0x18000400,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x7e0000,0x40,0x20000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public Proyecto1(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Proyecto1(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new Proyecto1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Proyecto1(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new Proyecto1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Proyecto1(Proyecto1TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(Proyecto1TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[34];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 35; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 34; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}

/**
 * JavaCC file
 */
 
options {
  IGNORE_CASE = false;
  STATIC = false;
}
PARSER_BEGIN(Proyecto1)
package uniandes.teolen.parserJavaCC.parserProyecto;

import java.util.*;
 
public class Proyecto1{
	ArrayList <String> varsAccepted = new ArrayList<String >();
	ArrayList <Function> funcsAccepted = new ArrayList< Function >();
} 
 
PARSER_END(Proyecto1)

SKIP :
{
  "\r" | "\t" | "\n"
}
TOKEN : /* OPERATORS */
{
  		< SPACE: " " >
|        <EQUAL: "=">
|    	<COMMA: ",">
| 		<COLON: ":">
|    	<RPAR: ")">
| 		<LPAR: "(">
| 		<LCOR: " [ ">
| 		<RCOR: " ]">
| 		< MULT: "*" >
| 		< PLUS: "+" >
|		< REST: "-" >
| 		< DIV: "/" >
| 		< MOD: "%" > 
| 		< G: ">" >
| 		< L: "<" >
| 		< GE: ">=" >
| 		< LE: "<=" >
| 		< E: "==" > 
| 		< NE: "!=" > 	
}

TOKEN :
{
    < #DIGI: "0" | "1" | "2"| "3" | "4" | "5" |  "6" | "7" | "8" |"9" >
|   < #MAY: ["A"-"Z"] >
|   < #MIN: ["a"-"z"] >
|   < VAR : "var" >
| 	< VAR_NAME: (<MIN>| <MAY>)(<MIN>| <MAY> | <DIGI>)+>
| 	< FUNC_NAME: (<MIN>| <MAY> | < DIGI >)+ >
|   < DEFINE : "define" >
|   < PRINT : "print">
| 	< IF : "if">
| 	< NUMBER: (< DIGI >)+ >  
}
int proyecto():
{
varsAccepted.add("define");
varsAccepted.add("var");
varsAccepted.add("print");
varsAccepted.add("if");
funcsAccepted.add(new Function("define"));
funcsAccepted.add(new Function("var"));
funcsAccepted.add(new Function("print"));
funcsAccepted.add(new Function("if"));
}
{
   (variables())+
   (functions())+
   sysout()
   {
		return 0;
   }
}
void variables():
{}
{
  	//TODO verificar que el var no esté ya en el array de accepted
	< VAR > <SPACE> variable() (< SPACE >)? < EQUAL > (< SPACE >)? ea()
}
void variable():
{
	Token t;
}
{
  	(t = < VAR_NAME >)
  	{
		boolean encontrado = false;
	  	int i = 0;
		while(i < varsAccepted.size() && !encontrado)
		{
			encontrado = varsAccepted.get(i).equals(t.image);
			i++;
		}
		if(encontrado)
		{
			throw new Error("la variable ya existe " + t.image);
		}
		varsAccepted.add(t.image);
  	}	  
}

  
void functions():
{
  ArrayList <String > parametros = new ArrayList<String >();
  
}
{
  //TODO verificar que el nomfunct no esté ya en el otro array de accepted
  < DEFINE > <SPACE> nomfunct() <COLON > // TODO poner que la expresión aritmetica sea solo con los parametros
}
void nomfunct(ArrayList< String > parametro):
{
   Token t;
}
{
  	(t = < FUNC_NAME >)+ < LPAR> (params(parametro)(<COMMA> params(parametro))*)? <RPAR>
  	{
		boolean encontrado = false;
	  	int i = 0;
		while(i < funcsAccepted.size() && !encontrado)
		{
			encontrado = funcsAccepted.get(i).equals(t.image);
			i++;
		}
		if(encontrado)
		{
			throw new Error("la funcion ya existe " + t.image);
		}
		a = new Function(t.image);
		a.setParametros(parametro);
		funcsAccepted(a);
  	}	
}

void sysout():
{}
{
  < PRINT > (< SPACE >)? < LPAR > (< SPACE >)? ea() (< SPACE >)? < RPAR >
}
  
void ea():
{ }
{	//TODO verificar que el var si esté ya en el array de accepted
	//TODO verificar que el nomfunct si esté ya en el otro array de accepted
 	< NUMBER > ((<MULT >|< DIV >| < REST > | < PLUS > | < MOD >) ea())? | validarSiVariableEsta() ((<MULT >|< DIV >| < REST > | < PLUS > | < MOD >) ea())? | validarSiVariableEsta() ((<MULT >|< DIV >| < REST > | < PLUS > | < MOD >) ea())?| < LCOR > ea() < RCOR >((<MULT >|< DIV >| < REST > | < PLUS > | < MOD >) ea())? | cond()((<MULT >|< DIV >| < REST > | < PLUS > | < MOD >) ea())?
}

void eb():
{}  
{
	ea() (< G >|< GE > | < L > | < LE > | < E > | < NE > ) ea()
}
void cond():
{ }
{
  < IF > (< SPACE >)? < LPAR > (< SPACE >)? eb() (< SPACE >)? < COMMA > (< SPACE >)? ea()  (< SPACE >)? < COMMA > (< SPACE >)? ea() (< SPACE >)? < RPAR >
}


void validarSiVariableEsta():
{
	token t;
}
{
	(t = < VAR_NAME >)
  	{
		boolean encontrado = false;
	  	int i = 0;
		while(i < varsAccepted.size() && !encontrado)
		{
			encontrado = varsAccepted.get(i).equals(t.image);
			i++;
		}
		if(!encontrado)
		{
			throw new Error("la variable no existe " + t.image);
		}
  	}		
}
void validarSiFuncionEsta():
{
  	ArrayList <String > parametros = new ArrayList<String >();
	token t;
}
{
	(t = < FUNC_NAME >)+ < LPAR > (params(parametros)(<COMMA> params(parametros))*)? <RPAR>
  	{
		Function f = null;
	  	int i = 0;
		while(i < funcsAccepted.size() && f == null)
		{
		  	if(funcsAccepted.get(i).getNombre().equals(t.image))
		  		encontrado = funcsAccepted.get(i);
			i++;
		}
		if(!encontrado)
		{
			throw new Error("la funcion no existe " + t.image);
		}
		if(f.getParametros().size() == parametros.size())
		{
			throw new Error("el numero de parametros de la funcion no coincide ");
		}
  	}		
}

  
void params(ArrayList< String > parametro):
{
	Token t;
}
{
	(t = < VAR_NAME >)
	{
		{
		boolean encontrado = false;
	  	int i = 0;
		while(i < parametro.size() && !encontrado)
		{
			encontrado = parametro.get(i).equals(t.image);
			i++;
		}
		if(encontrado)
		{
			throw new Error("el parametro ya existe " + t.image);
		}
		parametro.add(t.image);
	}
	// verifica que la ea que se cree despues del : use los parametros pasados por parametro
}
  








  
